# From: https://github.com/wincent/wincent/blob/main/aspects/dotfiles/files/.zshrc
#
# Installation:
# To get this to work, you need to install zsh-async. When I did this, I just
# manually cloned the repo into ~/.zsh/zsh-async.
#
# NOTES:
# I really really like this prompt. It's simple, but it's got a lot of info.
# I would like to find a way to indicate when VI mode has been enabled.

# # Create a hash table for globally stashing variables without polluting main
# scope with a bunch of identifiers.
typeset -A __WINCENT

__WINCENT[ITALIC_ON]=$'\e[3m'
__WINCENT[ITALIC_OFF]=$'\e[23m'
autoload -U add-zsh-hook

typeset -F SECONDS
function -record-start-time() {
  emulate -L zsh
  ZSH_START_TIME=${ZSH_START_TIME:-$SECONDS}
}
add-zsh-hook preexec -record-start-time

function -update-ps1() {
  # Check for tmux by looking at $TERM, because $TMUX won't be propagated to any
  # nested sudo shells but $TERM will.
  local TMUXING=$([[ "$TERM" =~ "tmux" ]] && echo tmux)
  if [ -n "$TMUXING" -a -n "$TMUX" ]; then
    # In a tmux session created in a non-root or root shell.
    local LVL=$(($SHLVL - 1))
  elif [ -n "$XAUTHORITY" ]; then
    # Probably in X on Linux.
    local LVL=$(($SHLVL - 2))
  else
    # Either in a root shell created inside a non-root tmux session,
    # or not in a tmux session.
    local LVL=$SHLVL
  fi

  # %F{green}, %F{blue}, %F{yellow} = change foreground color
  # %f = turn off foreground color
  # %n = $USER
  # %m = hostname up to first "."
  # %B = bold on, %b = bold off
  # %1~ = show 1 trailing component of working directory, or "~" if is is $HOME
  # %(1j.*.) = "*" if the number of jobs is at least 1
  # %(?..!) = "!" if the exit status of the last command was not 0
  # %(!.%F{yellow}%n%f.) = if root (!) show yellow $USER, otherwise nothing.
  # $(!.%F{yellow}.%F{red})$(printf ...) = show one ❯ per $LVL (red for root, otherwise yellow)
  if [ -n "$GIT_COMMITTER_DATE" -a -n "$GIT_AUTHOR_DATE" -a -n "$TW" ]; then
    # Show last `tw` or `tick` step.
    export PROMPT="%F{green}${SSH_TTY:+%n@%m}%f%B${SSH_TTY:+:}%b%F{blue}\n%F{yellow}%B(${TW})%(1j.*.)%(?..!)%b%f %B%(!.%F{yellow}%n%f.)%(!.%F{yellow}.%F{red})$(printf '\u276f%.0s' {1..$LVL})%f%b "
  else
    # I don't really understand this, but somehow using the "$" prefix along with single quotes
    # allows us to use \n and actually get a newline
    export PROMPT_BASE_1="%F{green}${SSH_TTY:+%n@%m}%f%B${SSH_TTY:+:}%b%F{blue}"
    export PROMPT_BASE_2="%F{yellow}%B%(1j.*.)%(?..!)%b%f %B%(!.%F{yellow}%n%f.)%(!.%F{yellow}.%F{red})$(printf '\u276f%.0s' {1..$LVL})%f%b "
    export PROMPT=$PROMPT_BASE_1$'\n'$PROMPT_BASE_2
  fi
  if [[ -n "$TMUXING" ]]; then
    # Outside tmux, ZLE_RPROMPT_INDENT ends up eating the space after PS1, and
    # prompt still gets corrupted even if we add an extra space to compensate.
    export ZLE_RPROMPT_INDENT=0
  fi
}
add-zsh-hook precmd -update-ps1

# LP: I just manually clone this repo into ~/.zsh/zsh-async (after running stow for my dotfiles)
if [ -f "$HOME/.zsh/zsh-async/async.zsh" ]; then
  # http://zsh.sourceforge.net/Doc/Release/User-Contributions.html
  autoload -Uz vcs_info

  () {
    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr "%F{green}•%f" # default 'S'
    zstyle ':vcs_info:*' unstagedstr "%F{red}•%f" # default 'U'
    zstyle ':vcs_info:*' use-simple true
    zstyle ':vcs_info:git+set-message:*' hooks git-untracked
    # %b = branch info
    # %c = staged file info
    # %u = unstaged file info
    # %m = misc info (I use this for ahead/behind arrows)
    zstyle ':vcs_info:git*:*' formats '%F{#585B70}%b%f%c%u %m' # default ' (%s)-[%b]%c%u-'
    zstyle ':vcs_info:git*:*' actionformats '%F{#585B70}%b%f|%F{red}%a%f %m%c%u ' # default ' (%s)-[%b|%a]%c%u-'

    # Add up/down arrows after branch name, if there are changes to pull/to push
    zstyle ':vcs_info:git+post-backend:*' hooks git-post-backend-updown
    function +vi-git-post-backend-updown() {
      git rev-parse @{upstream} >/dev/null 2>&1 || return
      local -a x; x=( $(git rev-list --left-right --count HEAD...@{upstream} ) )
      hook_com[misc]+="%F{cyan}" # end coloring
      (( x[2] )) && hook_com[misc]+="↓"
      (( x[1] )) && hook_com[misc]+="↑"
      hook_com[misc]+="%f" # end coloring
      return 0
    }

    function +vi-git-untracked() {
      emulate -L zsh
      if [[ -n $(git ls-files --exclude-standard --others 2> /dev/null) ]]; then
        hook_com[unstaged]+="%F{blue}•%f"
      fi
    }
  }

  source $HOME/.zsh/zsh-async/async.zsh

  -start-async-vcs-info-worker() {
    async_start_worker vcs_info
    async_register_callback vcs_info -async-vcs-info-worker-done
  }

  -get-vcs-info-in-worker() {
    # -q stops chpwd hook from being called:
    cd -q $1
    vcs_info
    print ${vcs_info_msg_0_}
  }

  -async-vcs-info-worker-done() {
    local job=$1
    local return_code=$2
    local stdout=$3
    local more=$6
    if [[ $job == '[async]' ]]; then
      if [[ $return_code -eq 1 ]]; then
        # Corrupt worker output.
        return
      elif [[ $return_code -eq 2 || $return_code -eq 3 || $return_code -eq 130 ]]; then
        # 2 = ZLE watcher detected an error on the worker fd.
        # 3 = Response from async_job when worker is missing.
        # 130 = Async worker crashed, this should not happen but it can mean the
        # file descriptor has become corrupt.
        #
        # Restart worker.
        async_stop_worker vcs_info
        -start-async-vcs-info-worker
        return
      fi
    fi
    vcs_info_msg_0_=$stdout
    (( $more )) || zle reset-prompt
  }

  -clear-vcs-info-on-chpwd() {
    vcs_info_msg_0_=
  }

  -trigger-vcs-info-run-in-worker() {
    async_flush_jobs vcs_info
    async_job vcs_info -get-vcs-info-in-worker $PWD
  }

  async_init
  -start-async-vcs-info-worker
  add-zsh-hook precmd -trigger-vcs-info-run-in-worker
  add-zsh-hook chpwd -clear-vcs-info-on-chpwd

  PROMPT_BASE_DIR_AND_VSC="%F{blue}%~%f \${vcs_info_msg_0_}"
  setopt PROMPT_SUBST
else
  PROMPT_BASE_DIR_AND_VSC="%F{blue}%~%f"
fi

function -update-rprompt() {
  emulate -L zsh
  if [ $ZSH_START_TIME ]; then
    local DELTA=$(($SECONDS - $ZSH_START_TIME))
    local DAYS=$((~~($DELTA / 86400)))
    local HOURS=$((~~(($DELTA - $DAYS * 86400) / 3600)))
    local MINUTES=$((~~(($DELTA - $DAYS * 86400 - $HOURS * 3600) / 60)))
    local SECS=$(($DELTA - $DAYS * 86400 - $HOURS * 3600 - $MINUTES * 60))
    local ELAPSED=''
    test "$DAYS" != '0' && ELAPSED="${DAYS}d"
    test "$HOURS" != '0' && ELAPSED="${ELAPSED}${HOURS}h"
    test "$MINUTES" != '0' && ELAPSED="${ELAPSED}${MINUTES}m"
    if [ "$ELAPSED" = '' ]; then
      SECS="$(print -f "%.2f" $SECS)s"
    elif [ "$DAYS" != '0' ]; then
      SECS=''
    else
      SECS="$((~~$SECS))s"
    fi
    ELAPSED="${ELAPSED}${SECS}"
    export PROMPT="$PROMPT_BASE_1 $PROMPT_BASE_DIR_AND_VSC"$'\n'"$PROMPT_BASE_2"
    export RPROMPT="%F{cyan}%{$__WINCENT[ITALIC_ON]%}${ELAPSED}%{$__WINCENT[ITALIC_OFF]%}%f"
    unset ZSH_START_TIME
  else
    export PROMPT="$PROMPT_BASE_1 $PROMPT_BASE_DIR_AND_VSC"$'\n'"$PROMPT_BASE_2"
    export RPROMPT=""
  fi
}
add-zsh-hook precmd -update-rprompt
